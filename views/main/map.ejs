<!DOCTYPE html>
<html lang="en">

<head>
    <%- include('./partials/headerlink'); %>
    <link rel="stylesheet" href="/admin/assets/vendor/fonts/fontawesome/css/fontawesome-all.css">
    <link rel="stylesheet" href=" https://cdn.jsdelivr.net/npm/pretty-checkbox@3.0/dist/pretty-checkbox.min.css">
</head>

<style>
    #map {
        width: 100%;
        height: 90vh;
        z-index: 0;
    }

    #veryfied-icon .tooltiptext {
        visibility: hidden;
        background-color: #e2edebd9;
        color: #000;
        text-align: center;
        border-radius: 5px;
        padding: 20px;
        position: absolute;
        z-index: 9999;
        margin: -54px 16px;
        right: 15px;
        font-size: 12px;
        text-transform: capitalize;
        line-height: 1.4;
    }

    #veryfied-icon:hover .tooltiptext {
        visibility: visible;
    }

    .legend-subtitle {
        position: relative;
    }

    .legend-subtitle .legend-item {
        padding: 0;
    }

    .get-chart {
        position: absolute;
        right: 0;
        top: 0;
        font-size: 12px;
        padding: 5px;
        width: 80px;
    }

    .icon-terverifikasi {
        color: #367BF5;
        font-size: 14px;
    }

    .icon-belum-terverifikasi {
        color: #ACBCA3;
        font-size: 14px;
    }
    .nav_list a {
        border: 1px solid #ced4da;
        border-radius: 5px;
    }

    .kinerja-positif {
        font-weight: bold;
        color: #53C351;
        float: right;
        right: 0;
        position: absolute;
        margin: 0 27px;
    }

    .kinerja-negatif {
        font-weight: bold;
        color: #EA3D2F;
        float: right;
        right: 0;
        position: absolute;
        margin: 0 27px;
    }

    .val-count {
        display: flex;
    }

    .val-count span {
        line-height: 22px;
        margin: 0 2px;
    }

    #overlay-preload-map {
        visibility: hidden;
    }

    #overlay-preload,
    #overlay-preload-map {
        position: fixed;
        display: block;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 888;
        cursor: pointer;
    }

    #overlay-preload img,
    #overlay-preload-map {
        position: absolute;
        top: 50%;
        left: 50%;
        z-index: 9999;
    }

    /* .legend-des span {
        float: right;
        position: absolute;
        right: 0;
        margin: 0 25px;
    } */

    .check-counter {
        margin: 7px !important;
        position: absolute;
        right: 0;
        top: 0;
        background: #ea3d2f66;
        color: white;
        /* padding: 5px; */
        font-size: 12px;
        font-weight: bold;
        border-radius: 3px;
        width: 17px;
        /* height: 17px; */
        /* line-height: 1.4; */
        transition-delay: 0s, 0.3s;
    }

    .map-fitur-normal {
        position: fixed;
        background: white;
        z-index: 777;
        right: 0;
        top: 114px;
        margin: 11px;
        /* padding: 10px; */
        border-radius: 3px;
        display: block;
        border: 1px solid #ced4da;
        transition-property: right, visibility;
        transition-duration: 0.3s, 0s;
        transition-delay: 0s, 0.3s;
    }

    .icon-fitur {
        padding: 10px;
        border-bottom: 1px solid #ced4da;
    }

    .map-fitur-normal .icon-fitur {
        cursor: pointer;
    }

    .map-fitur-normal .icon-fitur:hover {
        background-color: #00000018;
    }

    .iconify {
        color: #000;
    }

    .map-fitur-normal.move {
        transition-property: visibility, right;
        transition-duration: 0s, 0.3s;
        right: 400px;
    }

    .select-base {
        position: absolute;
        right: 45px;
        top: 0px;
        background: white;
        padding: 10px;
        border-radius: 3px;
        border: 1px solid #ced4da;
        font-size: 12px;
    }

    .select-base option {
        border-bottom: 1px solid #ced4da;
        padding: 5px;
    }

    .select-base option:hover {
        background-color: #00000018;
    }
</style>

<body id="body-pd">
    <div id="overlay-preload">
        <img src="/main/preload/loader-1.svg" alt="" srcset="" width="100">
    </div>
    <header class="header" id="header">
        <div class="new-brand">
            <%- include('./partials/navbar-brand'); %>
        </div>
        <div class="region-form">
            <!-- <label for="region-selection">Select Region</label> -->
            <!-- <select id="region-selection" class="form-control">
                <%
                if(all_region.length!=0){
                var i=1;
                all_region.forEach(function(all_region){
                %>
                <option id="region<%= all_region.id_region%>" value="<%= all_region.id_region%>" onclick="getID(this)">
                    <%= all_region.nama_region +', '+ all_region.provinsi %></option>
                <%  i++; }) %>
                <% } else { %>
                <tr>
                    <option>No Region</option>
                </tr>
                <% } %>
            </select>
            <button onclick="filterByRegion()" class="btn btn-success" style="font-size: 12px;font-weight: 600;">Submit</button> -->
            <%- include('./partials/new-navbar'); %>
            <div class="vl"></div>
            <div class="language-selection">
                <a id="lang-selection" onclick="window.location.href = '/main/map_en/<%= region.id_region %>/en'"><%= lang.toUpperCase() %></a>
            </div>
        </div>
    </header>
    <div id="nav-info">
        <div class="sec-nav-tec">
            <div class="left-text">
                <i class="fas fa-map-marker-alt" style="font-size: 20px;"></i>
                <i class="fas fa-chevron-right margin"></i>
                <a class="contain-link" href="/main/dataset/<%= region.id_region %>">Dataset</a>
                <i class="fas fa-chevron-right margin"></i>
                <a class="active-link">Kab. <%= region.nama_region %></a>
                <i class="fas fa-chevron-right margin"></i>
                <a >MRV PPH</a>

                <a href="/main/map_data/<%= region.id_region %>" id="btn-switch" class="floating" > <i class="fas fa-database" style="margin-right: 5px; font-size: 10px;"></i> Data Explorer</a>

            </div>
        </div>
    </div>
    <div class="l-navbar" id="nav-bar">
        <nav class="nav">
            <div class="title-target" style="margin-top: 10px;line-height: 1;">
                <h2><%= legend.length %></h2>
                <p style="font-size:14px;">Target </p>
                <p class="small-kab" style="text-align: center;width: 100%;margin: 5px 0;">Kab. <%= region.nama_region %></p>
            </div>
            <div class="legend-place">
                <div class="nav_list">
                    <%
                    if(legend.length!=0){
                    let i=1;
                    legend.forEach(function(legend){
                    %>
                    <a id="target_<%= legend.id_target %>" class="nav_link" onclick="showLegend(this)">
                        <p class="check-counter" id="count-<%= legend.id_target %>">0</p>
                        <i class="<%= legend.icon %>" style="color:#53C351;margin:10px"></i>
                        <span class="nav_name"><%= legend.display_name %></span>
                    </a>
                    <%  i++; }) %>
                    <% } else { %>

                    <a href="#" id="gg" class="nav_link active">
                        <i class="fas fa-frown" style="color:#53C351;margin:10px"></i>
                        <span class="nav_name">Upps! Data belum tersedia.</span>
                    </a>
                    <% } %>
                </div>
            </div>
        </nav>
    </div>
    <div id="map-fitur" class="map-fitur-normal">
        <div class="icon-fitur" onclick="zoomIn()">
            <a><span class="iconify" data-icon="bi:zoom-in"></span></a>
        </div>
        <div class="icon-fitur" onclick="zoomOut()">
            <a><span class="iconify" data-icon="bi:zoom-out"></span></a>
        </div>
        <div class="icon-fitur" id="fit-bounds">
            <a><span class="iconify" data-icon="bi:fullscreen"></span></a>
        </div>
        <div class="icon-fitur">
            <a onclick="showBasemapList()"><span class="iconify" data-icon="bi:layers-fill"></span></a>
            <select id="basemap-list" class="select-base" onChange="changeBasemap(this)" style="visibility: hidden;">
                <option value="Topographic">Topographic</option>
                <option value="Streets">Streets</option>
                <option value="NationalGeographic">National Geographic</option>
                <option value="Oceans">Oceans</option>
                <option value="Gray">Gray</option>
                <option value="DarkGray">Dark Gray</option>
                <option value="Imagery">Imagery</option>
                <option value="ImageryClarity">Imagery (Clarity)</option>
                <option value="ImageryFirefly">Imagery (Firefly)</option>
                <option value="ShadedRelief">Shaded Relief</option>
                <option value="Physical">Physical</option>
            </select>
        </div>
    </div>
    <!--Container Main start-->
    <div id='map'>

        <div id="overlay-preload-map">
            <img src="/main/preload/loader-1.svg" alt="" srcset="" width="100">
        </div>
    </div>

    <div id="legend-placement" class="height-100 bg-light"></div>

    <div id="chart-placement"></div>

    <%- include('./partials/footerlink'); %>
    <script src="/admin/assets/vendor/jquery/jquery-3.3.1.min.js"></script>
    <script>
        function detectmobile() {

            let a = navigator.userAgent || navigator.vendor || window.opera;
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i
                .test(a) ||
                /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i
                .test(a.substr(0, 4))) {
                return true;
            } else {
                return false;
            }
        }

        if (detectmobile() && document.documentElement.clientWidth <= 768) {
            window.location.href = '/main/prevent_mobile';
        }

        function zoomIn() {
            map.zoomIn()
        }

        function zoomOut() {
            map.zoomOut()
        }

        async function showBasemapList() {
            let list = await document.getElementById('basemap-list')
            let status = await list.style.visibility
            if (status === 'hidden') {
                list.style.visibility = 'visible'
            } else {
                list.style.visibility = 'hidden'
            }
        }

        function changeLanguage() {
            alert('Maaf, versi Inggris belum tersedia!')
        }

        function filterByRegion() {
            let selected = document.getElementById('region-selection')
            window.location.href = `/main/map/${selected.value}`
        }

        async function getCurrent(id) {
            let data = await document.getElementById(`region${id}`)
            data.selected = true
        }

        // map section
        const map = L.map('map', {
            zoomControl: false
        }).setView([39.74739, -105], 13);

        let general_loader = document.getElementById('overlay-preload')

        // add basemaplayer
        let layer = L.esri.basemapLayer('Topographic').addTo(map);

        let layerLabels;

        function setBasemap(basemap) {
            if (layer) {
                map.removeLayer(layer);
            }

            layer = L.esri.basemapLayer(basemap);

            map.addLayer(layer);

            if (layerLabels) {
                map.removeLayer(layerLabels);
            }

            if (basemap === 'ShadedRelief' ||
                basemap === 'Oceans' ||
                basemap === 'Gray' ||
                basemap === 'DarkGray' ||
                basemap === 'Terrain'
            ) {
                layerLabels = L.esri.basemapLayer(basemap + 'Labels');
                map.addLayer(layerLabels);
            } else if (basemap.includes('Imagery')) {
                layerLabels = L.esri.basemapLayer('ImageryLabels');
                map.addLayer(layerLabels);
            }
        }

        function changeBasemap(basemaps) {
            var basemap = basemaps.value;
            setBasemap(basemap);
        }

        let region_style = () => {
            return {
                weight: 1,
                opacity: 1,
                color: '#000',
                fillColor: '',
                fillOpacity: 0,
            }
        }

        let region_layer = L.geoJSON()
        let url = "<%= region.geojson %>"

        let geo = $.ajax({
            url: url,
            dataType: "json",
            success: console.log("County data successfully loaded."),
            error: function (xhr) {
                console.log(xhr.statusText)
            }
        })
        
        $.when(geo).done(function () {
            let fitToBound = document.getElementById('fit-bounds')

            fitToBound.addEventListener('click', function () {
                map.fitBounds(region_layer.getBounds())
            })

            general_loader.style.visibility = 'hidden'

            region_layer.addData(geo.responseJSON)
            region_layer.setStyle(region_style)

            map.fitBounds(region_layer.getBounds())
            map.addLayer(region_layer)
        })

        getCurrent(`<%- region.id_region %>`)

        // Global function
        // grouping object by its properties
        const groupBy = (array, key) => {
            return array.reduce((result, currentValue) => {
                (result[currentValue[key]] = result[currentValue[key]] || []).push(
                    currentValue
                );
                return result;
            }, {});
        };

        // Covert 'histori capaian' to JSON object
        let histori_object = []
        let temp_histori_object;

        '<% histori_capaian.forEach(function(histori){ %>'
        temp_histori_object = {}
        '<% Object.keys(histori).forEach(function(keys){ %>'
        if ('<%= keys %>' === 'geojson') {
            temp_histori_object['<%= keys %>'] = `<%- histori[keys] %>`
        } else {
            temp_histori_object['<%= keys %>'] = `<%- histori[keys] %>`
        }
        '<% }) %>'
        histori_object.push(temp_histori_object)
        '<% }) %>'

        let final_histori_object = histori_object

        // Grouping by id_target
        const historiGroupByIdTarget = groupBy(final_histori_object, 'id_target');

        // create legend
        let createLegend = (obj) => {

            let final_legend = []

            Object.keys(obj).forEach(key => {
                let filtered = obj[key]
                let grouping = groupBy(filtered, 'id_rincian_target')

                let nested_legend = []

                Object.keys(grouping).forEach(key => {
                    let grouped = grouping[key]

                    let leg = grouped.map(g => {
                        let p_kinerja;
                        if (g.rule === 'under baseline') {
                            if (parseInt(g.target_tahunan) >= parseInt(g.aktual)) {
                                p_kinerja =
                                    `<p class="kinerja-text mbc-2" style="margin:0;color:green"> ${g.kinerja} </p>`
                            } else {
                                p_kinerja =
                                    `<p class="kinerja-text mbc-2" style="margin:0;color:red"> ${g.kinerja} </p>`
                            }
                        } else {
                            if (parseInt(g.target_tahunan) <= parseInt(g.aktual)) {
                                p_kinerja =
                                `<p class="kinerja-text mbc-2" style="margin:0;color:green"> ${g.kinerja} </p>`
                            } else {
                                p_kinerja =
                                `<p class="kinerja-text mbc-2" style="margin:0;color:red"> ${g.kinerja} </p>`
                            }
                        }
                        let veryfied_icon;

                        if(g.status_verifikasi === 'terverifikasi') {
                            veryfied_icon = "/global/img/veryfied.svg"
                        } else {
                            veryfied_icon = "/global/img/unveryfied.svg"
                        }

                        return `
                                 <li>
                                    <div id="list-layer" class="list-arranged" style="display: flex;">
                                            <input class="geojson-input" id="input-${g.rincian_target.replaceAll(" ","-") +'-'+g.tahun_data}" type="checkbox" value='${JSON.stringify(g)}'>
                                        <div style="display:flex;width:100%">
                                            <div class="bx-1">
                                                <p class="legend-item mbc-2">
                                                    Tahun ${g.tahun_data}
                                                </p>
                                                <p class="legend-des" style="font-size:12px;color:#6f6f6f">
                                                  
                                                    ${
                                                        `<span>${JSON.parse(g.style).fillColor || JSON.parse(g.style).color || Object.keys(JSON.parse(g.style)).map(a => {
                                                            return JSON.parse(g.style)[a].fillColor != '' ? JSON.parse(g.style)[a].fillColor : JSON.parse(g.style)[a].color 
                                                        }).join(",")}</span>
                                                        ` 
                                                    }
                                                    Warna polygon
                                                </p>
                                            </div>
                                            <div class="bx-2">
                                               ${p_kinerja}
                                               <span style="line-height:1.6">${g.satuan}</span>
                                            </div>
                                            <div class="bx-2">
                                                
                                                <a id="veryfied-icon"><img width="30" height="30" src=${veryfied_icon}><span class="tooltiptext">${g.status_verifikasi}</span></a>
                                            </div>
                                        </div>
                                    </div>   
                                </li>
                           `
                    })
                    // <a style="vertical-align:middle;color:#ccd6d5"><i class="fas fa-info-circle"></i></a>
                    let sec_legend = `
                        <div class="legend-group" id="group-${key}">
                            <div class="legend-subtitle">
                                <p class="legend-item">${grouped[0].rincian_target} 
                            </p>
                            <span>Last update, ${grouped[0].last_update} </span>
                                <button id="getchart-${grouped[0].id_rincian_target}" onclick="showChart(this)" class="btn btn-dark get-chart">Analisis </button>
                                <a id="collapse-${key}"><i class="fas fa-chevron-down coll-icon" style="vertical-align:middle"></i></a>
                            </div>
                            <div class="list-legend-container" id="container-${key}">
                                 ${leg.join("")} 
                            </div>
                        </div>
                       `
                    nested_legend.push(sec_legend)
                })

                let legend_div = `
                        <div class="map-legend" id="target-${key}">
                           <div class="title-section">
                                <i class="bx bxs-layer"></i>
                                <div class="title">
                                    <p id="title-replacement" class="legend-title"></p>
                                    <span>Target</span>
                                </div>
                                <span id="hide-btn-legend-${key}" class="hide-legend-btn" onclick="removeLegend(this)"> <i class="fas fa-eye-slash"></i></span>
                            </div>
                            <p id="sub-legend" class="legend-title" style="font-size:16px;text-transform:capitalize"></p>
                            <ul id="id-list-legend" class="legend-list">
                                ${nested_legend.join("")}
                            </ul>
                        </div>
                        `
                final_legend.push(legend_div)
            })

            return final_legend.join("")
        }

        // filter form legend - cadangan 
        // <div class="filter-form">
        //     <input class="form-control legend-title" style="padding:12px"></input>
        // </div>

        let legend_placement = document.getElementById('legend-placement')
        legend_placement.innerHTML = createLegend(historiGroupByIdTarget)

        async function showLegend(el) {
            let legends = await document.querySelectorAll('.map-legend')

            legends.forEach(async legend => {
                legend.classList.remove('active')
            })

            let list = document.getElementById(`${el.id.replaceAll("target_","target-")}`)
            let sub_title = list.querySelectorAll('.legend-title')[0]
            let select_inner = el.querySelector('span')

            sub_title.innerText = select_inner.innerText 
            list.classList.add('active')

            let selector = document.querySelectorAll('.legend-subtitle a')
            selector.forEach(s => {
                let id = s.id.replaceAll('collapse','container')
                let id_2 = s.id.replaceAll('collapse','group')
                s.onclick = function() {
                    let list = document.getElementById(id)
                    let icon = document.getElementById(id_2)
                    
                    let selector = document.querySelector(`#${id_2} i`)
                    
                    selector.classList.toggle('rotate-icon')
                    
                    if(list.className.includes('show-list')) {
                        list.classList.remove('show-list')
                    } else {
                        list.classList.add('show-list')
                    }
                }
            })
        }

        let countActiveLayer = async () => {
            let legend_div = await document.querySelectorAll('.map-legend.active')
            let legend = await document.querySelectorAll('.map-legend.active input')
            let legend_id = legend_div[0].id.replaceAll("target-", "count-")

            let check = []
            legend.forEach(l => {
                check.push(l.checked)
            })

            let filter = check.filter(c => {
                return c == true
            }).length

            document.getElementById(legend_id).innerHTML = filter
        }


        let getGeojsonFromInput = async (input) => {
            for (let i = 0; i < input.length; i++) {
                let raw_prop = await JSON.parse(input[i].value)

                let checkbox = await input[i]
                let geojson = await raw_prop.geojson
                let loader = document.getElementById('overlay-preload-map')
                let geojson_layer = L.geoJSON()

                document.getElementById(checkbox.id).onclick = async function () {

                    if (this.checked === true) {
                        countActiveLayer()
                        general_loader.style.visibility = 'visible'

                        let geo = $.ajax({
                            url: geojson,
                            dataType: "json",
                            success: console.log("County data successfully loaded."),
                            error: function (xhr) {
                                console.log(xhr.statusText)
                            }
                        })
                        $.when(geo).done(function () {

                            geojson_layer.addData(geo.responseJSON)

                            map.addLayer(geojson_layer)
                            setGeoJsonStyle(raw_prop, geojson_layer)

                            general_loader.style.visibility = 'hidden'

                            geojson_layer.eachLayer(function (layer) {
                                layer.on('mouseover', function (e) {
                                    layer.setStyle({
                                        color: 'blue',
                                        weight: 3,
                                        opacity: 0.5
                                    })
                                })

                                layer.on('mouseout', function (e) {
                                    setGeoJsonStyle(raw_prop, geojson_layer)
                                })

                                layer.on('click', function (e) {
                                    setGeoJsonStyle(raw_prop, geojson_layer)
                                 
                                    let raw_content = [e.target.feature
                                        .properties
                                    ].map(a => {
                                        let b = Object.keys(a).map(
                                            k => {
                                                return `<tr><td style="font-weight:bold;color:#fff;background:#142940">${k}</td><td style="font-weight:bold">${a[k]}</td></tr>`
                                            })
                                        return `<p style="font-weight:bold; font-size: 14px;margin: 10px 0;">GEOJSON PROPERTIES</p><p style="border-bottom:2px solid #369151;margin-bottom:10px;margin-top:0"><table class="table first" style="margin-bottom:0">${b.join("")}</table>`
                                    })
                                    
                                    let popup = new L.Popup()
                                        .setLatLng(e.target._bounds.getCenter())
                                        .setContent(raw_content.join(""))

                                    map.openPopup(popup);
                                    layer.setStyle({
                                        color: 'blue',
                                        weight: 3,
                                        opacity: 1
                                    })
                                })
                            });
                        })
                    } else {
                        countActiveLayer()
                        map.removeLayer(geojson_layer)
                    }
                }
            }
        }

        let setGeoJsonStyle = (raw_prop, layer) => {
            if (raw_prop.tipe_style === "single") {
                return layer.setStyle(JSON.parse(raw_prop.style))
            } else {

                let f_prop = raw_prop.properti

                let getKategoriStyle = (feature) => {
                    let prop = feature.properties[f_prop]
                    return setKategoriStyle(prop)
                }

                let setKategoriStyle = (prop) => {
                    let prop_used = JSON.parse(raw_prop.style)
                    let prop_val = Object.keys(prop_used)

                    for (let i = 0; i < prop_val.length; i++) {
                        switch (prop) {
                            case prop_val[i]:
                                return prop_used[prop_val[i]]
                                break
                        }
                    }
                }
                return layer.setStyle(getKategoriStyle)
            }
        }

        let getChart = (data, id) => {
          
            let text = () => {
                return data.length == 1 ? data[0].tahun_data : data[0].tahun_data + ' - ' + data[data.length - 1].tahun_data
            }
          
            Highcharts.chart(`container-chart-${id}`, {
                chart: {
                    spacingBottom: 15,
                    spacingTop: 30,
                    spacingLeft: 10,
                    spacingRight: 10,
                },
                title: {
                    y: 0,
                    text: `Series Periode ${text()}`,
                    align: 'center',
                    margin : 10,
                    style: {
                        color: '#000',
                        fontWeight: 'bold',
                        textTransform: 'capitalize',
                        fontSize: "16px",
                    }
                },
                subtitle: {
                    y: 15,
                    text: `${data[0].rincian_target}`,
                    align: 'center',
                },
                xAxis: {
                    categories: data.map(a => {
                        return a.tahun_data
                    })
                },
                yAxis: {
                    gridLineColor: 'transparent',
                    title: {
                        text: data[0].satuan
                    },
                },
                series: [{
                    type: 'column',
                    name: `Aktual`,
                    data: data.map(a => {
                        return parseInt(a.aktual)
                    }),
                    color: '#F3A72E'
                }, {
                    type: 'spline',
                    name: 'Target Tahunan',
                    data: data.map(a => {
                        return parseInt(a.target_tahunan)
                    }),
                    color: '#142940',
                    marker: {
                        lineWidth: 2,
                        lineColor: '#ACBCA3',
                        fillColor: '#142940'
                    }
                }]
            });
        }

        let transformToTable = (obj) => {
            let final_obj = []
            
            obj.forEach(o => {
                let raw = {}
                raw["tahun"] = `<td>${o.tahun_data}</td>`
                raw["target_tahunan"] = `<td>${o.target_tahunan +' '+ o.satuan}</td>`
                raw["aktual"] = `<td>${o.aktual +' '+ o.satuan}</td>`
                raw["capaian"] = `<td>${o.target_tahunan - o.aktual +' '+ o.satuan}</td>`
                final_obj.push(raw)
            })

            let tr_gen = final_obj.map(o => {
                return `<tr>${Object.values(o).join("")}</tr>`
            })
            
            return tr_gen
        }

        let input = document.querySelectorAll("#legend-placement .geojson-input")

        getGeojsonFromInput(input)

        let cal_kinerja = (rule, target, aktual) => {
            let cal = ((aktual - target) / target) * 100 
            let down = '<i class="fas fa-arrow-down" style="font-size: 20px;color:red;margin-top:5px;margin-right:5px"></i>'
            let up =  '<i class="fas fa-arrow-up" style="font-size: 20px;color:green;margin-top:5px;margin-right:5px"></i>'

            let size = 22

            let kinerja = cal.toString()

            if(rule === 'under baseline') {
                return parseInt(target) >= parseInt(aktual) ?  `${up}<h2 style="color:green"> ${Math.abs(cal)}</h2>` :  `${down}<h2 style="color:red">${ cal}</h2>` 
            } else {
                return parseInt(target) <= parseInt(aktual) ? `${up}<h2 style="color:green"> ${cal}</h2>` : `${down}<h2 style="color:red">${cal}</h2>` 
            }
        }
        // <i class="fas fa-arrow-down" style="font-size: 22px;color:red;margin-top:5px"></i> 
        let createAnalisis = (obj) => {
            let goupByIdRincianTarget = groupBy(obj, 'id_rincian_target')
            let body = document.getElementById('body-pd')
            let chart_value = []
            Object.keys(goupByIdRincianTarget).forEach(async id => {

                let chart_placement = document.createElement('div')
                chart_placement.id = `chart-placement-${id}`
                chart_placement.className = 'chart-placement'

                let raw_obj = goupByIdRincianTarget[id]
               
                let length = raw_obj.length - 1
                let filteredObj = raw_obj[length]

                let aktual_data = `
                        <div id="card-item-${id}">
                            <div class="card-analisis">
                                <p style='font-size:18px;text-transform: capitalize;font-weight:800'>${filteredObj['rincian_target']}<span id="hide-btn-legend-${id}" class="hide-chart-btn" onclick="removeChart(this)"><i class="fas fa-eye-slash"></i></span></p>
                                <p style="font-weight:normal">Periode 2014 - 2015</p>
                            </div>
                            <div class="hr-line"></div>
                            <div class="nested-card">
                                <p style="font-size: 14px;">Summary</p>
                                <p style="font-weight:normal">Capaian aktual dari data terakhir yang di-update.</p>
                                <div class="row-container" style="margin:10px 24px">
                                    <div class="row" style="padding:0">
                                        <div class="col-md-6" style="padding:0">
                                            <div class="data-capaian" style="border-radius: 5px 0 0 0;">
                                                <p>Target Tahunan</p>
                                                <div style="display:flex">
                                                    <h2 >${filteredObj['target_tahunan']} </h2>
                                                <span style="margin-top:15%;margin-left:8px">${filteredObj['satuan']}</span>
                                                </div>
                                                <div class="v-line-small"></div>
                                            </div>
                                        </div>
                                        <div class="col-md-6" style="padding:0">
                                            <div class="data-capaian" style="border-radius: 0 5px 0 0;">
                                                <p>Aktual Tahun ${filteredObj['tahun_data']}</p>
                                                <div style="display:flex">
                                                    <h2 >${filteredObj['aktual']} </h2>
                                                <span style="margin-top:15%;margin-left:8px">${filteredObj['satuan']}</span>
                                                </div>
                                                <div class="v-line-small"></div>
                                            </div>
                                        </div>
                                    </div>   
                                    <div class="row">
                                        <div class="col-md-6" style="padding:0">
                                            <div class="data-capaian" style="border-radius: 0 0 0 5px;">
                                                <p>Target VS Aktual </p>
                                                <div style="display:flex">
                                                    <h2 >${filteredObj['kinerja']} </h2>
                                                <span style="margin-top:15%;margin-left:8px">${filteredObj['satuan']}</span>
                                                </div>
                                                <div class="v-line-small"></div>
                                            </div>
                                        </div>
                                        <div class="col-md-6" style="padding:0">
                                            <div class="data-capaian" style="border-radius: 0 0 5px 0;">
                                                <p>Capaian ${filteredObj['tahun_data']}</p>
                                                <div style="display:flex">
                                                    ${cal_kinerja(filteredObj['rule'],filteredObj['target_tahunan'],filteredObj['aktual'])}
                                                <span style="margin-top:15%;margin-left:8px">%</span>
                                                 </div>
                                                <div class="v-line-small"></div>
                                            </div>
                                        </div>
                                    </div>  
                                </div>   
                            </div>
                            <div class="hr-line"></div>
                            <div class="nested-card">
                                <p style="font-size: 14px;">Chart</p>
                                <p style="font-weight:normal">Grafik historis capaian kinerja ${filteredObj['rincian_target'].toLowerCase()} </p>
                                <div class="card-analisis">
                                    <figure class="highcharts-figure">
                                        <div class="container-chart" id="container-chart-${id}"></div>
                                    </figure>
                                </div>
                            </div>
                            <div class="hr-line"></div>
                            <div class="nested-card" style="overflow-x:auto">
                                <p style="font-size: 14px;">Table</p>
                                <p style="font-weight:normal">Table historis capaian ${filteredObj['rincian_target'].toLowerCase()}</p>
                                <table class="table first" style="font-size:12px;margin-top:10px;max-width:100%;white-space:nowrap;">
                                    <tr style="border-bottom: 2px solid #E1E1E1;background:#142940;color:#fff">
                                        <th>Tahun</th>
                                        <th>Target Tahunan</th>
                                        <th>Aktual</th>
                                        <th>Capaian</th>
                                    </tr>
                                  ${transformToTable(raw_obj).join("")}
                                </table>
                                </div>
                            </div>
                        </div>
                    `
                chart_placement.innerHTML = await aktual_data
                body.appendChild(chart_placement)

                getChart(raw_obj, id)
            })
        }

        function update_value_count(element, value) {
            $(element).animate({
                counter: parseInt(value)
            }, {
                duration: 1000,
                easing: 'swing',
                step: function (now) {
                    $(this).text(Math.ceil(now));
                },
                complete: update_value_count
            });
        };

        async function showChart(el) {
            let fitur = document.getElementById('map-fitur')
            fitur.classList.add('move')

            let chart_placement = await document.querySelectorAll('#body-pd .chart-placement')
            chart_placement.forEach(place => {
                place.classList.remove('active')
            })

            let currentClickId = el.id.replaceAll("getchart-", "")
            let currentCard = `chart-placement-${currentClickId}`

            await document.getElementById(currentCard).classList.add('active')

            let selector_count = document.querySelectorAll(`#${currentCard} h2`)

            selector_count.forEach(h3 => {
                let value = h3.innerText
                update_value_count(h3, value);
            })
        }

        createAnalisis(final_histori_object)

        async function removeLegend(el) {
            let id = el.id
            let aktif_legend = document.getElementById(`${id.replaceAll("hide-btn-legend-","target-")}`)
            aktif_legend.classList.remove('active')
        }

        async function removeChart(el) {
            let fitur = document.getElementById('map-fitur')
            fitur.classList.remove('move')

            let id = el.id
            let aktif_chart = document.getElementById(`${id.replaceAll("hide-btn-legend-","chart-placement-")}`)
            aktif_chart.classList.remove('active')
        }

        let d = document.querySelectorAll('.legend-des span')

        for (let i = 0; i < d.length; i++) {
            let colors = d[i].innerHTML.split(",")
            let new_el = []
            colors.forEach(color => {
                new_el.push(`<i class="fas fa-circle" style="color:${color};font-size:12px"></i>`)
            })
            d[i].innerHTML = new_el.join("")
        }
    </script>
</body>

</html>